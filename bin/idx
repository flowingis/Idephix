#!/usr/bin/env php
<?php

foreach (array(__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        define('IDEPHIX_COMPOSER_INSTALL', $file);
        break;
    }
}

if (!defined('IDEPHIX_COMPOSER_INSTALL')) {
    die(
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

require IDEPHIX_COMPOSER_INSTALL;

const DEFAULT_IDXFILE = 'idxfile.php';
const DEFAULT_CONFIGFILE = 'idxrc.php';

$options = getopt("f:c:", array("file:","config:"));

$idxFile = getcwd() . '/' . DEFAULT_IDXFILE;
$configFile = getcwd() . '/' . DEFAULT_CONFIGFILE;

if (isset($options["f"])) {
    $idxFile = $options["f"];
} elseif (isset($options["file"])) {
    $idxFile = $options["file"];
}

if (isset($options["c"])) {
    $configFile = $options["c"];
} elseif (isset($options["config"])) {
    $configFile = $options["config"];
}

if (is_file($idxFile) && is_file($configFile)) {
    $idx = Idephix\Idephix::fromFile(new \Idephix\File\FunctionBasedIdxFile($idxFile, $configFile));
    $idx->run();
    return;
}

if(false === strpos($idxFile, DEFAULT_IDXFILE)) {
    echo "$idxFile file not exist!";
    exit;
}

$idx = new Idephix\Idephix();
$idx->run();

